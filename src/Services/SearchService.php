<?php

namespace Mateusztumatek\NovaModelLinkField\Services;

use Illuminate\Support\Str;
use Laravel\Nova\GlobalSearch;
use Laravel\Nova\Http\Requests\NovaRequest;
use Laravel\Nova\Resource;
use Mateusztumatek\NovaModelLinkField\Contracts\ResolveResourceWithLinkContract;

class SearchService extends GlobalSearch
{

    /**
     * Link types
     * @var string
     */
    protected $link_types = 'absolute';

    /**
     * @param ResolveResourceWithLinkContract $resolveReourcesWithLinksService
     */
    public function __construct(ResolveResourceWithLinkContract $resolveReourcesWithLinksService)
    {
        $resources = $resolveReourcesWithLinksService->getResourcesWithLinks()->map(function ($item) {
            return get_class($item);
        })->toArray();
        $request = new NovaRequest();
        parent::__construct($request, $resources);
    }

    /**
     * Search by available resource models
     * @param string $text
     * @return \mixed[][]
     */
    public function searchModelsByText(string $text)
    {
        $this->request->search = $text;
        return $this->get();
    }

    /**
     *
     * @param $resourceClass
     * @param Resource $resource
     * @return array|mixed[]
     */
    public function transformResult($resourceClass, Resource $resource)
    {
        $array = parent::transformResult($resourceClass, $resource); // TODO: Change the autogenerated stub
        $model = $resource->model();
        return array_merge($array, [
            'linkable' => ($this->link_types == 'absolute')? $model->novaLink() : Str::replaceFirst(url(''), '', $model->novaLink()),
            'title' => $resourceClass::singularLabel() . ' : ' . (string)$resource->title()
        ]);
    }

    public function setLinkTypes($type){
        $this->link_types = $type;
    }
}
